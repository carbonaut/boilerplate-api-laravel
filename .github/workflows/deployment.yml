name: deployment

on:
  push:
    branches:
      - development
      - master

env:
  CI: true

jobs:
  install-dependencies:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v1

      - name: Setup PHP
        uses: shivammathur/setup-php@v1
        with:
          php-version: '8.0'

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Restore Composer Dependencies
        id: composer-cache-restore
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}

      - name: Restore NPM Dependencies
        id: node-modules-cache
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.OS }}-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install Composer Dependencies
        run: composer install --prefer-dist

      - name: Install NPM Dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Cache NPM Dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.OS }}-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Cache Composer Dependencies
        if: steps.composer-cache-restore.outputs.cache-hit != 'true'
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}

  release:
    runs-on: ubuntu-latest
    needs: install-dependencies
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - name: Skip Release
        run: echo "Release is not being done in this project."
  #    - name: Checkout Repository
  #      if: github.ref == 'refs/heads/master'
  #      uses: actions/checkout@v1

  #    - uses: actions/setup-node@v1
  #      if: github.ref == 'refs/heads/master'
  #      with:
  #        node-version: '12.x'

  #    - name: Restore NPM Dependencies
  #      if: github.ref == 'refs/heads/master'
  #      uses: actions/cache@v1
  #      with:
  #        path: node_modules
  #        key: ${{ runner.OS }}-node-modules-${{ hashFiles('**/package-lock.json') }}

  #    - name: Generate Release
  #      if: github.ref == 'refs/heads/master'
  #      env:
  #        RELEASE_DOCS_PROJECT_ID: boilerplate-api-laravel
  #        RELEASE_DOCS_AWS_ACCESS_KEY_ID: ${{ secrets.RELEASE_DOCS_AWS_ACCESS_KEY_ID }}
  #        RELEASE_DOCS_AWS_SECRET_ACCESS_KEY_ID: ${{ secrets.RELEASE_DOCS_AWS_SECRET_ACCESS_KEY_ID }}
  #        RELEASE_DOCS_AWS_BUCKET: ${{ secrets.RELEASE_DOCS_AWS_BUCKET }}
  #        GH_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
  #      run: npm run semantic-release

  deploy:
    runs-on: ubuntu-latest
    needs: release
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v1

      - name: Set Environment Variables
        shell: bash
        run: |
          case ${{ github.ref }} in
            refs/heads/master)
              echo '::set-env name=CURRENT_ENV::production'
              ;;

            refs/heads/development)
              echo '::set-env name=CURRENT_ENV::development'
              ;;

            *)
              echo 'No configuration set for branch ${{ github.ref }}' && exit 1;
          esac

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: eu-central-1

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Restore Dependencies
        id: composer-cache-restore
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}

      - name: Install Dependencies
        run: composer install --prefer-dist

      - name: Install AWS and EB CLI
        run: |
            sudo apt-get -y -qq update
            sudo apt-get install python-pip python-dev build-essential
            sudo pip install --upgrade setuptools
            sudo pip install awsebcli --upgrade

      - name: Deploying to EB
        run: eb deploy ${{ secrets.PROJECT_ID }}-$CURRENT_ENV

  skip-ci:
    runs-on: ubuntu-latest
    if: "contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - name: Skip CI
        run: echo "Deploy triggered by semantic release. Skipping all jobs."
